{"version":3,"sources":["EachResipe.js","App.js","serviceWorker.js","index.js"],"names":["EachResipe","carolies","image","ingredients","name","className","src","alt","style","h1","map","ingredient","text","App","radomNo","Math","floor","random","console","log","useState","data","setData","search","setSearch","querry","setQuery","Link","useEffect","getData","a","fetch","json","response","hits","onSubmit","e","preventDefault","type","onChange","value","target","recipe","calories","label","key","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4SAGe,SAASA,EAAT,GAA0D,IAArCC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,YAAYC,EAAO,EAAPA,KAC7D,OACI,yBAAKC,UAAU,OACZ,yBAAKC,IAAKJ,EAAOK,IAAKL,IACvB,wBAAIG,UAAWG,IAAMC,IAAKL,GAChC,uCAAa,GAAb,IAAkBH,GACV,4BACHE,EAAYO,KAAI,SAACC,GACd,OACI,4BAAKA,EAAWC,WC6DjBC,MApEf,WACE,IACMC,EAAQC,KAAKC,MAAoB,EAAdD,KAAKE,UAC9BC,QAAQC,IAAIL,GAHC,MAIOM,mBAAS,IAJhB,mBAIRC,EAJQ,KAIFC,EAJE,OAKWF,mBAAS,IALpB,mBAKRG,EALQ,KAKAC,EALA,OAMUJ,mBALP,CAAC,UAAU,SAAU,QAAS,UAAW,aAAc,SAAU,aAAc,YAKrDN,IAN7B,mBAMRW,EANQ,KAMAC,EANA,KASPC,EAAI,0CAAsCF,EAAtC,mBAFA,WAEA,oBADE,oCAGdG,qBAAU,WACRC,MAEA,CAACJ,IACD,IAAMI,EAAO,uCAAG,8BAAAC,EAAA,sEACKC,MAAMJ,GADX,cACRN,EADQ,gBAESA,EAAKW,OAFd,OAERC,EAFQ,OAGdX,EAAQW,EAASC,MACjBhB,QAAQC,IAAIc,EAASC,MAJP,2CAAH,qDAgBb,OACE,yBAAK7B,UAAU,OACb,0BAAM8B,SARK,SAACC,GACdA,EAAEC,iBACFX,EAASH,GACTC,EAAU,MAMN,yBAAKnB,UAAU,OACb,yBAAKA,UAAU,qBACb,2BAAOA,UAAU,eAAeiC,KAAK,OAAOC,SAftC,SAACH,GACf,IAAMI,EAAMJ,EAAEK,OAAOD,MACrBhB,EAAUgB,OAeJ,yBAAKnC,UAAU,iBACb,4BAAQA,UAAU,wBAAwBiC,KAAK,UAA/C,YAIJ,yBAAKjC,UAAU,QACZgB,EAAKX,KAAI,SAACgC,GACT,IAAMzC,EAAWyC,EAAOA,OAAOC,SACzBzC,EAAQwC,EAAOA,OAAOxC,MACtBC,EAAcuC,EAAOA,OAAOvC,YAC5BC,EAAOsC,EAAOA,OAAOE,MAC3B,OACE,kBAAC5C,EAAD,CACE6C,IAAKzC,EACLA,KAAMA,EACNH,SAAUA,EACVC,MAAOA,EACPC,YAAaA,SAMvB,yBAAKE,UAAU,SACI,IAAhBgB,EAAKyB,QAAgB,gD,MCvDVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.07e8cb55.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from './recipe.module.css';\r\n\r\nexport default function EachResipe({carolies, image, ingredients,name}) {\r\n    return (\r\n        <div className=\"try\">\r\n           <img src={image} alt={image}/>\r\n          <h1 className={style.h1}>{name}</h1>\r\n    <p>Carolies {''} {carolies}</p>\r\n            <ol>\r\n        {ingredients.map((ingredient)=>{\r\n            return( \r\n                <li>{ingredient.text}</li>\r\n               )\r\n                 \r\n        })}\r\n          </ol>\r\n        </div>\r\n    )\r\n}\r\n","import React,{useState, useEffect} from 'react';\n\nimport './App.css';\nimport EachResipe from './EachResipe';\n\nfunction App() {\n  const foodItems=[\"oranges\",\"banana\", \"mango\", \"carrots\", \"Watermelon\", \"apples\", \"pineapples\", \"beetroot\"]\n  const radomNo=Math.floor(Math.random()*7);\n  console.log(radomNo);\nconst [data, setData]=useState([]);\nconst [search, setSearch]=useState('');\nconst [querry, setQuery]=useState(foodItems[radomNo]);\n  const id =\"997aff65\";\n  const key = \"d78f7f68da39a7ab85ab56338f16fdbb\";\n  const Link = `https://api.edamam.com/search?q=${querry}&app_id=${id}&app_key=${key}`;\n\nuseEffect(()=>{\n  getData();\n\n},[querry])\n  const getData = async () => {\n    const data = await fetch(Link);\n    const response = await data.json();\n    setData(response.hits);\n    console.log(response.hits)\n  }\n  const getValues=(e)=>{\n    const value=e.target.value;\n    setSearch(value);\n  }\n  const runQuery=(e)=>{\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={runQuery}>\n        <div className=\"row\">\n          <div className=\"col-md-8 offset-2\">\n            <input className=\"form-control\" type=\"text\" onChange={getValues} />\n          </div>\n          <div className=\"col-md-2 ml-0\">\n            <button className=\"btn btn-primary large\" type=\"submit\">Search</button>\n          </div>\n        </div>\n\n        <div className=\"try2\">\n          {data.map((recipe) => {\n            const carolies = recipe.recipe.calories;\n            const image = recipe.recipe.image;\n            const ingredients = recipe.recipe.ingredients;\n            const name = recipe.recipe.label;\n            return (\n              <EachResipe\n                key={name}\n                name={name}\n                carolies={carolies}\n                image={image}\n                ingredients={ingredients}\n              />\n            );\n          })}\n        </div>\n      </form>\n      <div className=\"Sorry\">\n        {data.length === 0 && \" Sorry, There was no match for your querry\"}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}